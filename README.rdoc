== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.

2.10 Demonstracja Rails, budowanie ksiegi gosci, cz. 2 viedopoint
2.11 Bonus: sztuczka z edytorem
3. Modele
3.6
3.7 Callbacki
3.8 Scopes - to nic innego jak nazwana kwerenda

3.9 Asocjacja belongs_to i has_many
3.10 Asocjacaja has_and_belongs_to_many - czyli przypisanie wiele do wielu (robimy to za pomoca tabeli posredniej
    - ktora przechowuje pojedyncze przypisanie taga do posta)
3.11 Asocjacja has_many :through

     http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association

3.12 Kwerendy na asocjacjach
4. Kontrollery
4.3 Akcja Index
4.4 Akcja New for formularz


5.5 Ukrywanie JavaScript i CoffeeScript
   - Uzyciek coffee scriptu jest o wiele prostsze, nie trzeba pisac tyle linijek kodu i jest przyjemniejszy

   index
   <% @posts.each do |post| %>
       <blockquote>
         <p><%= post.body %></p>
         <foother><cite><%= post.author %></cite></foother>
       </blockquote>
   <% end %>



   hide.coffee
   $ ->
     $(".container blockquote").on "click", ->
       $(this).hide(400)

   hide.js
   $(function() {
       $(".container blockquote").on("click", function () {
           $(this).hide(300);
       })
   })


5.6 Ajax: linki asynchroniczne

    1.Najpierw scieżki
      resources :posts do
        collection do
          get :surprise
        end
      end


    2.Akcja w kontrolerze
     def surprise
     end

    3. Klasa w widoku posts (bardzo wazne: remote:true) w tej klasie bedzie sie duzo dziac
      <div id="content-placeholder">
          <%= link_to "Niespodzianka", surprise_posts_path, class: "btn btn-info", remote: true %>
      </div>

    4. Nowy katalog z ajaxem w views/posts:  surprise.js.erb

       $("#content-placeholder").html("<%= escape_javascript(render(partial: "surprise_content")) %>");


    5. Prashal takze w views : _surprise_content.html.erb
       <div class="jumbotron">
         <h1>Niespodzianka?</h1>
         <p> To jest fajna niespodzianka </p>
         <p><%= link_to "Sprawdz to", posts_path, class: "btn btn-lg btn-primary" %></p>
       </div>

5.7  Ajax: formularze asynchroniczne
     1. Na początek musimy dodac id (id="form-container) : w views/posts/new
        w której bedzie sie duzo dzialo i BARZO WAZNE dodajemy metode remote: true - to dzięki niej mamy żadanie asynchroniczne

        <div id="form-container">
          <%= form_for @post, remote: true do |f| %>
              <div class="form-group">
                <%= f.label :athour, "Autor" %>
                <%= f.text_field :author, class: "form-control" %>
              </div>
              <div class="form-group">
                <%= f.label :body, "Tresc" %>
                <%= f.text_field :body, class: "form-control" %>
              </div>
              <%= f.submit "Dodaj wpis", class: "btn btn-default" %>
          <% end %>
        </div>

     2. W kontrolerze musimy dodac format danych ( uzytkownik moze miec wylączony js w przegladarce) a tak to niweluje ta zmiane
          def create
              @post = Post.new(post_params)
              if @post.save
                respond_to do |format|
                  format.html do
                    flash[:notice] = "Dziekujemy za wpis"
                    redirect_to posts_path
                  end
                  format.js {}
                end
              end
            end

     3. Nastepnie tworzymy plik w views.posts/create.js.erb
            $("#form-container").hide(500, function() {
              $("#form-container").html("<div class=\"alert alert-success\">Dziekujemy za wpis!</p>");
              $("#form-container").show(500);
            })


5.8 Turbolinks
     Jest automatycznie wczytywany i uzywany
     ale mozna go wylaczyc :
     <a href="/posts" data-no-turbolink> Ten link nie ma turbolinks</a>


6. Pisanie automatycznych testow - Test to nic innego jak kod ktory wywoluje inny kod i ktory spr. czy jest zgodny z oczekiwaniami
6.2 Testowanie modeli
     Mamy taką metode w modelu Post
      private
       def titleize_author
        self.author = self.author.to_s.titleize
       end

6.3 Testowanie kontrolerow
    class PostsControllerTest < ActionController::TestCase
      test "should get index" do
        get :index
        assert_response :success
        assert_not_nil assigns(:posts)
      end

      test "should get new" do
        get :new
        assert_response :success
        assert_not_nil assigns(:post)
      end

      test "should create a post" do

        assert_difference -> { Post.count}, 1 do
          post :create, post: {author: "Autor", body: "Wpis"}
        end


        assert_redirected_to posts_path
      end
    end

6.4 Capybara: testy integracyjne
    Mamy bardzo fajnego pomocnika https://github.com/teamcapybara/capybara
    postepujemy zgodnie z instrukcja dla test_unit
      - dodajemy gem
      - instalujemy
      - plik konfiguracyjny

     do /test_helper
     require 'capybara/rails'


      - nowy test tworzymy test/integration/guest_book.test.rb

           class GuestBookTest < ActionDispatch::IntegrationTest
             setup do
             end

             test "creates a post" do
               visit posts_path
               click_link "Dodaj wlsny wpis juz teraz"
               fill_in "Autor", with: "Testowy Autor"
               fill_in "Tresc", with: "Testowa treść"
               click_button "Dodaj wpis"

               assert page.has_content?("Dziękujemy za wpis"), "expected a flash message"
               assert page.has_content?("Testowy Author")
               assert page.has_content?("Testowa treść")
             end
           end

6.5 Spring: szybkie uruchamianie Rails i testow   - dzieki temu nie musi byc uruchaminana cala apka od nowa leczy tylko same testy
    spring

    bin/rake test     - tak uruchamiamy testy/ wszystko z bin bedzie nam szybko wczytywac ale dopiero durgi raz
    spring status
    spring stop
    bin/rake test


7. Wysylanie e-maili
   * rails g mailer PostsMailer new_post_notification
       Mozemy podejrzec mailera:
         * http://localhost:3000/rails/mailers
   http://localhost:3000/rails/mailers/posts_mailer/new_post_notification

   w /mailer/posts_mailer.rb

   class PostsMailer < ApplicationMailer

     # Subject can be set in your I18n file at config/locales/en.yml
     # with the following lookup:
     #
     #   en.posts_mailer.new_post_notification.subject
     #
     def new_post_notification(post)
       @post = post

       mail to: "to@example.org", subject: "Wow, nowy post!"
     end
   end


 zmieniamy takze widoki w mailerze
 oraz na sztywno damy mu dane chwilowo w :
 spec/mailers/previews/posts_mailer_prewiew.rb

 - wypelniamy pola ktore wyswietla sie podgladzei

 def new_post_notification
     PostsMailer.new_post_notification(Post.new(author: "Jhon", body: "Czesc wszytkim"))
 end


i tu sobie podglądamy maila : http://localhost:3000/rails/mailers/posts_mailer/new_post_notification





7.2 Wysylanie e-maila   - uzyjemy gemu letter_opener  - on bedzie oszukiwal ze
        wysla poczte z serwera tylko lokalnie bedzie nam to pokazywal w przeglądarce
        podlanczamy po prostu falszywą metode wysylania emaili


    CHCEMY  zeby na mail wysylal sie za kazdym razem
    dodamy callbecka i metode  - ale to nie bedzie nam wysylac maila

    zrobimy to w:    app/models/post.rb

      after_create :notify_admin

      def notify_admin
        PostsMailer.create_new_post_notification(self).deliver    -sama metoda deliver nie wysle go musimy uzyc serwera
      end
  * Musimy teraz skonfigurowac srodowisko developerskie do wysylania mailera
    w:
    config/development.rb

    - wkleimy gotowa konfiguracje

     config.action_mailer.delivery_method = :letter_opener
      config.action_mailer.smtp_settings = {
        :address              => "smtp.gmail.com",
        :port                 => 587,
        :user_name            => 'twojemail@gmail.com',
        :password             => 'abcdefg',
        :authentication       => "plain",
        :enable_starttls_auto => true                       - tutaj wlaczamy polaczenie szyfrowane
        }
      config.action_mailer.default_url_options = { :host => "localhost:3000" }    - bardzo wazne
         - maile nie sa renderowanae w przegladarce tylko w programie pocztowym i porgam pocztowy nie wie
           z ktorej domenty zostala wyslana wiadoamosc i dzieki tem railsy wiedza z jakiego hosta zostala
           wyslana ta wiadomosc

        config.action_mailer.raise_delivery_errors = false      # tu mamy opcje dzieki ktorej wylanczamym dostarzczanie informacji o bledach ale my ja wlczmy
        config.action_mailer.raise_delivery_errors = true


  * gdy wjedziemy na:    app/mailers/post_mailer.rb
       - widzimy ze standardowy wpis to to@example.org ale my to zmienimy na:


       def new_post_notification(post)
           @post = post
           mail to: "pikowoko@gmail.com", subject: "Wow, nowy post!", from: 'Hello Rails <pikowoko@gmail.com>'
       end

  * dodalem takze gem letter_opener  - zeby dzialalo wysylanie wiadomosci w nowycgh railsach
      group :development do
        # Access an IRB console on exception pages or by using <%= console %> in views
        gem 'web-console', '~> 2.0'
     -> gem 'letter_opener'

        # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring
        gem 'spring'
      end

7.3 Udawane wysylanie emaila


8.1 Aplikacjie wielojezykowe, formatowanie tekstu, walut
    * Najpierw defaultowo ustwamy jezyk w config/application.rb
       config.i18n.default_locale = :pl
       config.time_zone = 'Warsaw'
    * Nastepnie dodajmy rubiowa skladnie w views/posts/index
      - dzieki temu bedzimy mogli zmieniac jezyk
         <h1>
             <%= t "index.hello" %>
             <%= link_to "Dodaj wlsny wpis juz teraz", new_post_path %>
           </h1>
    * Nastepnie dodajmy plik pl.yml
      - i uzupelnijmy jego zawartosc z githuba:
           https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/pl.yml
    * Nastepnie zmodyfikujmy go dodajac z jakiej akcji korzysta czyli indexu
          pl:
            index:
               select_language: "Wybierz jezyk (%{language})"
               hello: "Cześć"
               ... reszta kodu z githuba
    * Nastepnie plik en.yml
            en:
              index:
                hello: "Welcome"
                select_language: "Select language (%{language})"
    * W Layotsie dodajmy nasza mozliwosc wyboru jezyka
            <div class="btn-group">
              <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                <%= t "index.select_language", language: I18n.locale %> <span class="caret"></span>
              </button>
              <ul class="dropdown-menu">
                <li><%= link_to "PL", set_locale_path(locale: "pl")%></li> <!-- i ta akcja bedzie pobierala z save_locale params - i znajduje sie w locales_controller  -->
                <li><%= link_to "EN", set_locale_path(locale: "en")%></li>
              </ul>
            </div>
    * Musimy miec takze nowy kontroller oraz metode ustawiajaca jezyk
         rails g controller locales
            * a w nim metode:
                 def save_locale
                     session[:locale] = params[:locale]
                     redirect_to :back
                 end
    * I jeszcze nasze routsy dajmy odpowiednie sciezki
           get 'locale', to: 'locales#save_locale', as: :set_locale
                 # adres url bedzie sie nazywal locale
                 # dalej nazwa kontrollera i nazwa akcji
                 # i nazwiemy ten url jako set_locale

8.2 Aplikacje wielojezyczne: formatowanie tekstu i walut
    * domyślnie railsy nie posiadaja komunikatow po polsku ale mozemy zainstalowac gema
      - o nazwie i18n z:
            https://github.com/svenfuchs/rails-i18n
    * dodajm gema:
      gem 'rails-i18n'
        bundle install   - oczywiscie to nic nie zmieni w naszej api ale
                           pozwoli uzyc metody nie tylko translate ale i localize
                           czyli daty i czasu w jezyku po polsku
    * W indexie dodajmy metody
        <pre>
           <%= I18n.localize Time.now, format: :long %>
          <%= I18n.localize Time.now, format: :short %>
          <%= l Date.today, format: :short %>                     <!-- Tutaj formatujemy dzisiejsza date -->
          <%= number_with_delimiter(1123131232.1231231231) %>     <!-- Tutaj formatujemy liczbe, w jezyku amerykanskim tysiace od milionow miliardow oddziela sie kropka-->
          <%= number_to_currency 1254.4444444 %>                  <!-- Ta metoda formatuje dane jako walute w zl lub usd -->
          <%= distance_of_time_in_words(rand(10_000).seconds) %>  <!-- A ta metoda to slowne odleglosc czasowa  -->
        </pre>

8.3 Simple_form: lepsze i prostsze formularze
    * uzyjemy gema ktorego dodajemy do gemfile:
       -   http://www.rubydoc.info/github/plataformatec/simple_form/master/frames
               gem 'simple_form'
                  bundle install
       - i jak zauwazylismy w dokumentacji musimy zainstalowac odpowiednie pliki, ale
         my zainstalujemy je z bootsrapem:
            - poniewaz simple_form potrafi uzywac bootstrapa i dlatego my go dodamy
            - zainstaluje on wszystkie integracje zwiazane z bootstrapem
            rails generate simple_form:install --bootstraps
    * I teraz w formualrzu zmieniamy zawartosc na ladniejsza

        <%= simple_form_for @post do |f| %>
          <%= f.input :author, hint: "Podaj swoje imię!" %>
          <%= f.input :body, label: "Treść", hint: "Jakaś podpowiedź" %>
          <%= f.association :category, prompt: "-- wybierz --" %>         - w ten sposob bardzo ladnie obsluguje ascocjacie, argument promt usowa nam poste pierwsze pole
          <%= f.association :tags, as: :check_boxes %>                    - w ten sposob smiple form obsluzy asocjacje jako checkboxy

          <%= f.submit class: "btn btn-default" %>
        <% end %>



        lub taki/itp

         <%= simple_form_for @post do |f| %>
              <%= f.input :author, hint: "Podaj swoje imie" %>
              <%= f.input :body, label: "Tresc", hint: "Tresc posta" %>
              <%= f.submit class: "btn btn-defalut" %>
          <% end %>


    * Spolszymy teraz wszytkie etykiety
        - dodajemy to w config/locales/simple_form.en.yml
            labels:
                      post:                                 - nazwa modelu
                        category: "Kategoria"
                        author: "Imię"
                        body: "Tresc :)"

8.4  KAMINARI -  Implementacja Pagniacji
     * Mozemy ograniczyc liczbe postów w bardzo latwy sposób np:
          def index
            @posts = Post.limit(2)          - po przez ograniczenie w kontrolerze
          end
          def index
           @posts = Post.limit(5).offset(2)   - a tutaj oprócz dwóch pierwszych (pomijamy je po prostu)
          end
     * Mamy także wyswietlanie linków pod wpisami i uzyjemy do tego KAMINARI:
          https://rubygems.org/gems/kaminari
             - postepujemy wdg. dokumentacji
                  gem 'kaminari'
                  bundle
        ** I teraz na sztywno
           def index
             @posts = Post.page(1).per(3)    - wyswietlamy pierwsza strone i 3 tylko wpisy na niej
           end
        ** I z uzyciem kaminari
          def index
            @posts = Post.page(params[:page]).per(3)
          end
            - a w widoku index musimy dodac:
               <p>
                 <%= paginate @posts %>
               </p>
     * Aby wygenerowac ladne widoki do Kaminari nalezy
           rails g kaminari:views bootstrap3
             - kaminari pobralo wszystkie potrzebne pliki
             - po odswiezenius strony mamy juz inne ladniejsze widoki
           * ale co gdy chcemy miec inne nazwy zamiast next prew
           * dodajemy nowy plik do config/locales/pl.kaminari.yml
              a w nim:
              pl:
                views:
                  pagination:
                    first: "&laquo; Początek"
                    last: "Koniec &raquo;"
                    previous: "&lsaquo; Prev"
                    next: "Next &rsaquo;"
                    truncate: "&hellip;"
                helpers:
                  page_entries_info:
                    one_page:
                      display_entries:
                        zero: "No %{entry_name} found"
                        one: "Displaying <b>1</b> %{entry_name}"
                        other: "Displaying <b>all %{count}</b> %{entry_name}"
                    more_pages:
                      display_entries: "Displaying %{entry_name} <b>%{first}&nbsp;-&nbsp;%{last}</b> of <b>%{total}</b> in total"

           Zeby to zadziałało musimy dodac jeszcze config dla pl jezyka w config/application.rb
           config.i18n.default_locale = :pl
           - ale teraz po odswiezeniu strony slabo to wyglada - zmienmy to
           - W views mamy katalog kaminari z wszystkimi widokami
           - glownym komponentem jest _paginator.html.erb

                    <%= paginator.render do -%>
                      <ul class="pagination">
                        <%= first_page_tag unless current_page.first? %>
                        <%= prev_page_tag unless current_page.first? %>
                        <% each_page do |page| -%>
                          <% if page.left_outer? || page.right_outer? || page.inside_window? -%>
                            <%= page_tag page %>
                          <% elsif !page.was_truncated? -%>
                            <%= gap_tag %>
                          <% end -%>
                        <% end -%>
                        <%= next_page_tag unless current_page.last? %>
                        <%= last_page_tag unless current_page.last? %>
                      </ul>
                    <% end -%>

           - i z niego mozemy usunąc wszystkie niepotrzebne rzeczy
                    <%= paginator.render do -%>
                      <ul class="pagination">
                        <% each_page do |page| -%>
                          <% if page.left_outer? || page.right_outer? || page.inside_window? -%>
                            <%= page_tag page %>
                          <% elsif !page.was_truncated? -%>
                            <%= gap_tag %>
                          <% end -%>
                        <% end -%>
                      </ul>
                    <% end -%>
           * To nam w zupelnosci wystarczy- jest ladna i bootstrapowa


8.5 Devise: Logowanie i rejestracja
     *Gem devise jest uzywany w 95% aplikacji:
       https://rubygems.org/gems/devise
       Skorzystamy teraz z dokumentacji
       - dodamy bibloteke do naszego gemifa
          gem 'devise'   lub gem 'devise', '> 3.4'  - ta dziala
          bundle install
          rails generate devise:install
     * Devise dodal nam pliki m.inymi config/initializes/devise.rb
        - w tym plikiu mamy mozliwosc okreslenia:
              - jak sie nazwya wysylajacy emaile z haslem i linkiem potwierdzenia konta
              - po ilu godzinach ma wygasac link do potwierdzenia konta
              - jaka ma byc dlugosc hasla i wiele innych

     * Teraz wygenerujemy nasz model -czyli naszego Uzytkownika
          rails generate devise user
            ** Zobaczmy co nam wygenerowal divise:
                - model
                - migracje
                - wpis do routsow

                Zerknijmy do migracji:
                Widzimy ze mamy ciekawe pola, gdybysmy chcieli zeby uzytkownik sie blokowal
                 - to wystarczy ze odznaczymy ostanie pola :lockabl
                 - my sobie odzanczymy:
                      ## Confirmable
                             t.string   :confirmation_token
                             t.datetime :confirmed_at
                             t.datetime :confirmation_sent_at
                             t.string   :unconfirmed_email # Only if using reconfirmable

                Zeby to zadziałało musimy zajrzec do modelu i odkomentowac :   models/user.rb
                  i dopisac to co nas interesuje czyli , :lockabl
                    devise :database_authenticatable, :registerable,
                             :recoverable, :rememberable, :trackable, :validatable, :confirmable

            * Musimy jeszcze ustalic domyslne opcje adresow url dostarczonych do devise
               config/environmetns/development.rb:
                    config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
                        - i jeszcze jest nam potrzebne do tego ze nie bedzimy wysylac emaili prawdziwych tylko lokalnie w przeglądarce
                        -   gem 'letter_opener' - tez go uzyjemy
            * bundle
            * Zostalo nam wygenerownaie widokow devisowych - chcemy te bootstrapowe
               - uzyjemy do tego:
                  https://rubygems.org/gems/devise-bootstrap-views
                  - dodamy do gemfila
                      gem 'devise-bootstrap-views'
                      bundle
            * Ta bibloteka zawera pare stylow, dziki czemu formularze wyglądają lepiej
            * To opcja opcjonalna i dodamy ją w :
                app/assets/stylesheets/application.css/
                   *= require devise_bootstrap_views
            * I teraz musimy po prostu te widoki wygenerowac:
              rails g devise:views:bootstrap_templates
            * Teraz odpalmy zalegle migracje i devise jest gotowy
             rake db:migrate
             rails s
            * Zeby zobaczyc jakis adres wpisujemy dowolna tres w naszym adresie
              - i wyswietlki nam sie listwa adresow url
              - lub rake routes
              - i my szukamy tego: /users/sign_up(.:format)
                 new_user_registration_path 	GET 	/users/sign_up(.:format) 	devise/registrations#new
            * Teraz mamy:
              http://localhost:3000/users/sign_up


8.6.Devise_logowanie_rejestracja_dalsza_czesc
      * Takze mamy nasz formularz logowania i rejsteracji
      * Zrobimy tak ze dla nie zalogowanych uzytkownikow - uniemozliwimy mozliwosc dodawania wpisów
      * I kolejnym krokiem bedzie ukrycie linka dla niezalogowanych
      * A takze ukrycie i pokazanie linkow dla zalogowanych i przeciwnie

        - Zaczniemy od dodania metod devisowych w widoku posts/index
               <% if user_signed_in? %>
                   <p class="lead">
                     Witaj w naszej księdze gości!
                     <%= link_to "Dodaj własny wpis już teraz.", new_post_path %>
                   </p>
               <% else %>
                   <p class="lead">
                     Musisz się zalogować, aby dodać wpis.
                     <%= link_to "Zaloguj się", new_user_session_path %>
                   </p>
               <% end %>

        - Ukrylismy linki ALE CO JEZELI UZYTKOWNIK ZNA SCIEZKE DO STRONY i wpisze recznie
        - Zabezpieczymy sekcje oraz kontrollery aby nie wpuszczaly niezalogowanch
        - uzyjemy do tego before action
        - devise daje nam metode autheniticate_user!
        - ale tylko akcie new i create zeby byla niedostepna dla niezalogowanch

           * w kontrolerze post_controller
              before_action :authenticate_user!, only: [:new, :create]



